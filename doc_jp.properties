axiom_Antonym1_diagnostic = 反意性
axiom_Antonym1_justification = 「最年少」と「最古」の反意性によって、
axiom_Antonym2_diagnostic = 反意性
axiom_Antonym2_justification = 「最年少」と「最古」の反意性によって、
axiom_Superlative1_diagnostic = 一意性
axiom_Superlative1_justification = 最年少の一意性によって、
axiom_Superlative2_diagnostic = 一意性
axiom_Superlative2_justification = 最古の一意性により
axiom_adabsurdium_diagnostic = 広告absurdum
axiom_adabsurdium_justification = 滑稽なまでに推論によって、
axiom_addsub_diagnostic = 加減
axiom_addsub_justification = 加算と減算することにより{1}に{0}
axiom_app_def_diagnostic = マッピング
axiom_app_def_justification = 定義によって{0}に適用{1}
axiom_app_sqrt_bounded_diagnostic = 平方根
axiom_app_sqrt_bounded_justification = 平方根関数を適用することによって
axiom_app_sqrt_diagnostic = 平方根
axiom_app_sqrt_justification = 平方根関数を適用することによって
axiom_app_square_bounded_diagnostic = 平方
axiom_app_square_bounded_justification = 二乗することにより、
axiom_app_square_diagnostic = 平方
axiom_app_square_justification = 二乗することにより、
axiom_apply_forall_diagnostic = マッピング
axiom_apply_forall_justification = 適用することで{0}
axiom_apply_fun_lr_diagnostic = 機能的マッピング
axiom_apply_fun_lr_justification = マッピング左右による{0}
axiom_apply_ineq_inverse_diagnostic = 逆数
axiom_apply_ineq_inverse_justification = ℝ上multplicative逆の減少によって*
axiom_apply_ineq_sqrt_diagnostic = 平方根
axiom_apply_ineq_sqrt_justification = 平方根関数を適用することによって
axiom_apply_ineq_square_diagnostic = 平方
axiom_apply_ineq_square_justification = 二乗することにより、
axiom_arith_def_diagnostic = 定義
axiom_arith_def_justification = 等差数列の定義により、
axiom_arith_pro_diagnostic = 機能表現
axiom_arith_pro_justification = 等差数列の機能発現により
axiom_ax_bad_diagnostic = swindlecantsの嘘
axiom_ax_bad_justification = swindlecantsの言って嘘によって
axiom_ax_good_diagnostic = honestantsの真実
axiom_ax_good_justification = honestcantsの真の申告により
axiom_back_elim_equiv_diagnostic = 定義
axiom_back_elim_equiv_justification = 同値の定義により、
axiom_bound_conj_diagnostic = ダブル不平等
axiom_bound_conj_justification = ダブル不平等の定義により、
axiom_bound_to_eq_diagnostic = ダブル不平等
axiom_bound_to_eq_justification = ダブル不平等の定義により、
axiom_bounded_elim_diagnostic = ダブル不平等
axiom_bounded_elim_justification = 定義により
axiom_case_base_binary_diagnostic = 排中律
axiom_case_base_binary_justification = 排中律の原則によって、
axiom_case_base_diagnostic = 例論理和によって、
axiom_case_base_justification = 事例ベース推論によって、
axiom_case_good_or_bad_diagnostic = honestantsまたはswindlecants
axiom_case_good_or_bad_justification = honestantsとswindlecantsのdisjonctionによって
axiom_comb_comp_lt_diagnostic = 組成
axiom_comb_comp_lt_justification = 介在物の組成物による
axiom_combadd_diagnostic = 添加
axiom_combadd_justification = 添加することにより、
axiom_combine_cmp_minus_diagnostic = 引き算
axiom_combine_cmp_minus_justification = 不等式の減算することにより
axiom_combine_cmp_plus_diagnostic = 添加
axiom_combine_cmp_plus_justification = 不等式の添加によって
axiom_combsub_diagnostic = 引き算
axiom_combsub_justification = 減算することにより
axiom_commutativity_diagnostic = 交換性
axiom_commutativity_justification = 可換性によります
axiom_conj_diagnostic = 併せによって
axiom_conj_justification = 併せによって
axiom_deduce_not_color_diagnostic = バイナリカラー
axiom_deduce_not_color_justification = 色のbinarityによって
axiom_def_fbij_diagnostic = 全単射
axiom_def_fbij_justification = 全単射の定義により、
axiom_def_fcomp_diagnostic = 機能の組成
axiom_def_fcomp_justification = 関数合成の定義により、
axiom_def_finj_diagnostic = 注入
axiom_def_finj_justification = 注射の定義により、
axiom_def_finvol_diagnostic = 退縮
axiom_def_finvol_justification = 退縮の定義により、
axiom_def_fsurj_diagnostic = 全射
axiom_def_fsurj_justification = 全射の定義により、
axiom_def_rantisym_diagnostic = 反対称関係
axiom_def_rantisym_justification = 抗対称関係の定義により、
axiom_def_rcomp_diagnostic = 関係の合成
axiom_def_rcomp_justification = 関係の合成の定義により、
axiom_def_rfun_diagnostic = 関数関係
axiom_def_rfun_justification = 関数関係の定義により、
axiom_def_rident_diagnostic = アイデンティティの関係
axiom_def_rident_justification = アイデンティティ関係の定義により、
axiom_def_rinj_diagnostic = 単射関係
axiom_def_rinj_justification = 単射関係の定義により、
axiom_def_rinv_diagnostic = 逆相関
axiom_def_rinv_justification = 逆関係の定義により、
axiom_def_rrefl_diagnostic = 反射関係
axiom_def_rrefl_justification = 再帰リレーションの定義により、
axiom_def_rsurj_diagnostic = 全射関係
axiom_def_rsurj_justification = 全射関係の定義により、
axiom_def_rsym_diagnostic = 対称関係
axiom_def_rsym_justification = 対称関係の定義により、
axiom_def_rtotleft_diagnostic = 左完全関係
axiom_def_rtotleft_justification = 左総関係の定義により、
axiom_def_rtrans_diagnostic = 推移関係
axiom_def_rtrans_justification = 推移関係の定義により、
axiom_elim_comp_diagnostic = 不平等
axiom_elim_comp_justification = 不平等の定義により、
axiom_elim_conj_left_diagnostic = 左の控除
axiom_elim_conj_left_justification = 左の控除によって
axiom_elim_conj_right_diagnostic = 右の控除
axiom_elim_conj_right_justification = 右控除することにより
axiom_elim_eqfun_diagnostic = 機能的平等
axiom_elim_eqfun_justification = 関数の平等の定義により、
axiom_elim_eqset_diagnostic = 平等を設定
axiom_elim_eqset_justification = セットの平等の定義により、
axiom_elim_even_def_diagnostic = パリティ
axiom_elim_even_def_justification = パリティの定義により、
axiom_elim_false_exset_diagnostic = 空集合
axiom_elim_false_exset_justification = 空集合の定義により、
axiom_elim_gen_app_rel_diagnostic = リレーショナル会員
axiom_elim_gen_app_rel_justification = リレーショナルメンバーシップによって
axiom_elim_has_finite_limit_decr_diagnostic = 減少コンバージェンス
axiom_elim_has_finite_limit_decr_justification = 減少し、減少させることにより
axiom_elim_has_finite_limit_incr_diagnostic = 増加収束
axiom_elim_has_finite_limit_incr_justification = 増加ら成長させることにより
axiom_elim_is_elem_universe_diagnostic = 宇宙
axiom_elim_is_elem_universe_justification = 宇宙の定義により、
axiom_elim_multiple_diagnostic = 定義
axiom_elim_multiple_justification = 割り切れるの定義により、
axiom_elim_negation_diagnostic = 定義により
axiom_elim_negation_justification = 否定の定義により、
axiom_elim_pprod_diagnostic = デカルト積
axiom_elim_pprod_justification = デカルト積の定義により、
axiom_elim_requiv_diagnostic = 同値関係
axiom_elim_requiv_justification = 同値関係の定義により、
axiom_elim_scomp_diagnostic = 補体
axiom_elim_scomp_justification = セットの補体の定義により、
axiom_elim_sdiff_diagnostic = 差
axiom_elim_sdiff_justification = 差集合の定義により、
axiom_elim_sequiv_diagnostic = 同値類
axiom_elim_sequiv_justification = 等価クラスの定義により、
axiom_elim_set_lteq_diagnostic = セットインクルージョン
axiom_elim_set_lteq_justification = 集合の包含の定義により、
axiom_elim_shas_lower_bound_diagnostic = 下界
axiom_elim_shas_lower_bound_justification = 定義により
axiom_elim_shas_upper_bound_diagnostic = 上界
axiom_elim_shas_upper_bound_justification = 定義により
axiom_elim_sinter_diagnostic = 交差点
axiom_elim_sinter_justification = 積集合の定義により、
axiom_elim_sis_decreasing_diagnostic = 減少
axiom_elim_sis_decreasing_justification = 定義により
axiom_elim_sis_gt_zero_diagnostic = 正のシリーズ
axiom_elim_sis_gt_zero_justification = 定義により
axiom_elim_sis_increasing_diagnostic = 増加する
axiom_elim_sis_increasing_justification = 定義により
axiom_elim_sis_lt_zero_diagnostic = スイート負
axiom_elim_sis_lt_zero_justification = 定義により
axiom_elim_subset_diagnostic = 累乗集合
axiom_elim_subset_justification = パワーセットの定義により、
axiom_elim_sunion_diagnostic = 合併集合
axiom_elim_sunion_justification = 和集合の定義により、
axiom_elim_true_at_rank_diagnostic = Pの定義
axiom_elim_true_at_rank_justification = 定義により{0}
axiom_eq_inverse_diagnostic = 逆
axiom_eq_inverse_justification = 逆に変化させることにより、
axiom_eq_reverse_diagnostic = 反対
axiom_eq_reverse_justification = 反対を取ることによって、
axiom_eq_symmetry_diagnostic = 対称
axiom_eq_symmetry_justification = 平等関係の対称性によって、
axiom_eq_trans_diagnostic = 移行性
axiom_eq_trans_justification = 平等の関係の推移によって、
axiom_equiv_rtrans_diagnostic = 封入系製剤
axiom_equiv_rtrans_justification = 推移関係の包含ベースの製剤によって
axiom_ex_elim_diagnostic = 抽出による
axiom_ex_elim_justification = 証人の抽出による
axiom_ex_intro_diagnostic = 建設によって
axiom_ex_intro_justification = 建設によって
axiom_expand_diagnostic = 拡張
axiom_expand_justification = 拡大することにより
axiom_factorize_diagnostic = 因数分解
axiom_factorize_justification = ファクトライズすることにより{1}
axiom_falseall_diagnostic = 元falsoクオドリベット
axiom_falseall_justification = 矛盾を推定することにより
axiom_gen_factorize_diagnostic = 因数分解
axiom_gen_factorize_justification = ファクトライズにより{0}により{1}
axiom_geo_def_diagnostic = 定義
axiom_geo_def_justification = 等比数列の定義により、
axiom_geo_pro_diagnostic = 機能表現
axiom_geo_pro_justification = 等比数列の機能発現により
axiom_inclusionsimpl_diagnostic = 簡略化する
axiom_inclusionsimpl_justification = 書き換えることにより、 {1}として{0}
axiom_ind_basic_forall_diagnostic = 誘導
axiom_ind_basic_forall_justification = 誘導による
axiom_ind_init_diagnostic = から誘導
axiom_ind_init_justification = 誘導による
axiom_ineq_sym_rew_diagnostic = 対称
axiom_ineq_sym_rew_justification = 対称書き換えて
axiom_intro_false_diagnostic = 非矛盾
axiom_intro_false_justification = 非矛盾の原則によって、
axiom_intro_or_left_diagnostic = ゴーシュàパー正当化
axiom_intro_or_left_justification = ゴーシュàパー正当化
axiom_intro_or_right_diagnostic = ドロワットàパー正当化
axiom_intro_or_right_justification = ドロワットàパー正当化
axiom_intro_sqrt_square_diagnostic = 平方根
axiom_intro_sqrt_square_justification = 平方根を簡素化することにより、
axiom_limit_finite_diagnostic = 有限の極限
axiom_limit_finite_justification = 有限限界を計算することにより、
axiom_limit_inf_diagnostic = +∞限界
axiom_limit_inf_justification = ∞+限度を算出することにより
axiom_limit_neg_inf_diagnostic = -∞制限
axiom_limit_neg_inf_justification = 限度を算出することにより-∞
axiom_linearsimpl_diagnostic = 簡素化
axiom_linearsimpl_justification = 単純化することにより、 {0}
axiom_lradd_bounded_diagnostic = 添加
axiom_lradd_bounded_justification = 左右に追加することによって、 {0}
axiom_lradd_diagnostic = 添加
axiom_lradd_ineq_diagnostic = 添加
axiom_lradd_ineq_justification = 左右に追加することによって、 {0}
axiom_lradd_justification = 追加することによって、 {0}両側に
axiom_lradd_neq_diagnostic = 添加
axiom_lradd_neq_justification = 左右に追加することによって、 {0}
axiom_lrdiv_bounded_diagnostic = 分割
axiom_lrdiv_bounded_justification = 左右に分割して{0}
axiom_lrdiv_diagnostic = 分割
axiom_lrdiv_ineq_diagnostic = 分割
axiom_lrdiv_ineq_justification = 左右に分割して{0}
axiom_lrdiv_justification = 両側を分割して{0}
axiom_lrdiv_neq_diagnostic = 分割
axiom_lrdiv_neq_justification = 左右に分割して{0}
axiom_lrmul_bounded_diagnostic = 乗算
axiom_lrmul_bounded_justification = 左右を乗じ{0}
axiom_lrmul_diagnostic = 乗算
axiom_lrmul_ineq_diagnostic = 乗算
axiom_lrmul_ineq_justification = 左右を乗じ{0}
axiom_lrmul_justification = 両側を掛けて{0}
axiom_lrmul_neq_diagnostic = 乗算
axiom_lrmul_neq_justification = 左右を乗じ{0}
axiom_lrsub_bounded_diagnostic = 引き算
axiom_lrsub_bounded_justification = 左右を減算することにより{0}
axiom_lrsub_diagnostic = 引き算
axiom_lrsub_ineq_diagnostic = 引き算
axiom_lrsub_ineq_justification = 左右を減算することにより{0}
axiom_lrsub_justification = 減算することにより、 {0}両側から
axiom_lrsub_neq_diagnostic = 引き算
axiom_lrsub_neq_justification = 左右を減算することにより{0}
axiom_lt_next_int_diagnostic = 次の整数
axiom_lt_next_int_justification = 次の整数への移行によって、
axiom_modus_ponens_diagnostic = 手口のponens
axiom_modus_ponens_justification = 肯定式を適用することにより、
axiom_muldiv_diagnostic = 乗除
axiom_muldiv_justification = 乗算とで割ることにより、 {1}
axiom_neq_symmetry_diagnostic = symétrie
axiom_neq_symmetry_justification = パーsymétrie・デ・ラ・関係ドールのinégalité
axiom_non_zero_gt_diagnostic = より厳密に大きいです
axiom_non_zero_gt_justification = パーsupérioritéstricte
axiom_non_zero_lt_diagnostic = より厳密に小さいです
axiom_non_zero_lt_justification = パーinférioritéのstricte
axiom_polysquare_diagnostic = 驚くべき正体
axiom_polysquare_justification = 完璧な正方形を識別することにより{0}
axiom_proddecompl_diagnostic = 分解
axiom_proddecompl_justification = 製品の分解による
axiom_proddef_diagnostic = assocication
axiom_proddef_justification = 積演算子の結合規則によって適用される{0}
axiom_prodinverse_diagnostic = 逆インデックス作成
axiom_prodinverse_justification = 逆インデックス化することにより
axiom_prodlinear_diagnostic = 結合性
axiom_prodlinear_justification = 積演算子の結合規則によって適用される{0}
axiom_prodresult1_diagnostic = prodresult1
axiom_prodresult1_justification = prodresuult1
axiom_prodsimpl_diagnostic = prodsimpl
axiom_prodsimpl_justification = prodsimpl
axiom_produpshift_diagnostic = インデックスシフト
axiom_produpshift_justification = インデックスのシフトによって
axiom_reason_capacity_diagnostic = 推論する能力
axiom_reason_capacity_justification = 推論する帽子の着用者の能力によって
axiom_red_true_at_rank_diagnostic = 定義により
axiom_red_true_at_rank_justification = 定義により{0}
axiom_reducedenom_diagnostic = 共通点
axiom_reducedenom_justification = 共通分母に還元することにより
axiom_rewriting_diagnostic = 書き換え
axiom_rewriting_justification = 書き換えることにより、 {0}として{1}
axiom_sandwich_diagnostic = サンドイッチ
axiom_sandwich_justification = サンドイッチ定理により
axiom_section_diagnostic = 範囲内
axiom_section_justification = デモンストレーション
axiom_set_absorb_diagnostic = た吸収
axiom_set_absorb_justification = 吸収による
axiom_set_adabsurdum_diagnostic = 広告absurdum
axiom_set_adabsurdum_justification = セットの補体の退縮によって、
axiom_set_demorgan_diagnostic = ド・モルガンの法則
axiom_set_demorgan_justification = ド・モルガンの法則に従って
axiom_set_eq_symmetry_diagnostic = 対称
axiom_set_eq_symmetry_justification = 平等関係の対称性によって、
axiom_set_eq_trans_diagnostic = 移行性
axiom_set_eq_trans_justification = 平等の関係の推移によって、
axiom_set_excluded_diagnostic = 排中律
axiom_set_excluded_justification = 排中律の原則を適用することにより、
axiom_set_inter_comb_diagnostic = 交差点
axiom_set_inter_comb_justification = 交差点によって左右
axiom_set_lteq_transitivity_diagnostic = 移行性
axiom_set_lteq_transitivity_justification = インクルージョンの推移によって、
axiom_set_neutral_diagnostic = 単位元
axiom_set_neutral_justification = アイデンティティ要素のプロパティによって、
axiom_set_rewriting_diagnostic = 書き換え
axiom_set_rewriting_justification = 書き換えることにより、 {0}で{1}
axiom_set_union_comb_diagnostic = 連合
axiom_set_union_comb_justification = 組合によって左右
axiom_setassociative_diagnostic = 結合性
axiom_setassociative_justification = 連想によって
axiom_setcommutative_diagnostic = 交換性
axiom_setcommutative_justification = 可換性によります
axiom_setdevelopp_diagnostic = 拡張
axiom_setdevelopp_justification = 研究開発をすることにより
axiom_setfactorize_diagnostic = 因数分解
axiom_setfactorize_justification = ファクトライズすることにより
axiom_sigmadecompl_diagnostic = 分解
axiom_sigmadecompl_justification = シグマを分解することにより、
axiom_sigmadef_diagnostic = 定義
axiom_sigmadef_justification = シグマ関数の定義によって適用{0}
axiom_sigmainverse_diagnostic = 逆
axiom_sigmainverse_justification = 逆インデックス化することにより
axiom_sigmalinear_diagnostic = 直線性
axiom_sigmalinear_justification = シグマ関数の直線性によって適用される{0}
axiom_sigmaresult1_diagnostic = 最初の整数
axiom_sigmaresult1_justification = 最初の整数の和で
axiom_sigmaresult2_diagnostic = 最初の正方形
axiom_sigmaresult2_justification = 最初の平方根の和によって
axiom_sigmaresult3_diagnostic = 最初の力
axiom_sigmaresult3_justification = 最初の電力の合計によって、
axiom_sigmasimpl_diagnostic = 定義
axiom_sigmasimpl_justification = シグマ関数の定義によって、
axiom_sigmaupshift_diagnostic = インデックスシフト
axiom_sigmaupshift_justification = インデックスの違いによる
axiom_slim_def_elim_diagnostic = リミット
axiom_slim_def_elim_justification = 制限の定義により、
axiom_slim_inf_def_elim_diagnostic = 無限の限界
axiom_slim_inf_def_elim_justification = 無限の限界の定義により、
axiom_slimfinite_inf_elim_diagnostic = 無限の限界
axiom_slimfinite_inf_elim_justification = 
axiom_square_diff_diagnostic = 驚くべき正体
axiom_square_diff_justification = 2つの正方形の違いをファクトライズすることにより、
axiom_subadd_diagnostic = 減算と加算
axiom_subadd_justification = 減算と加算することにより{1}に{0}
axiom_trans_lt_gt_diagnostic = 移行性
axiom_trans_lt_gt_justification = 推移性により
axiom_updownsimpl_diagnostic = 上下の簡素化
axiom_updownsimpl_justification = 上下の簡素化によって、
axiom_varchange_diagnostic = 変数変換
axiom_varchange_justification = 書き換えることにより、 {0}で{1}
basic_A = A
basic_BeMarried = 結婚します
basic_BeMarried_neg = 結婚できませんの
basic_BeScottish = スコットランドであることを
basic_BeScottish_neg = スコットランドではないにします
basic_BlackHat = 黒
basic_ExprGT = {0} > {1}
basic_ExprGTEQ = {0} ≥ {1}
basic_ExprLT = {0} < {1}
basic_ExprLTEQ = {0} ≤ {1}
basic_FBij = {4}全単射であります
basic_FComp = {6} ∘ {7}
basic_FFInj = {1}注入が上にある[0 ... {0} ]
basic_FFMono = {1} [0 ...に厳密に単調である{0} ]
basic_FInj = {4}注入があります
basic_FInj_neg = {4}の注射ではありません
basic_FInvolution = {3}退縮です
basic_FSurj = {4}全射であります
basic_FSurj_neg = {4}全射ではありません
basic_False = 矛盾
basic_False_sci = 偽
basic_FindX = xの値を検索します。
basic_FindY = yの値を検索します。
basic_GoOutSundays = 日曜日に外出します
basic_GoOutSundays_neg = 日曜日に外出しないように
basic_GoToMatch = 明日サッカーの試合に移動します
basic_GoToMatch_neg = 明日試合に行くしないように
basic_GoToTraining = 今日の訓練に移動します
basic_GoToTraining_neg = 今日の訓練に行くしないように
basic_O1FInj = {4}注入があります
basic_O1FInj_neg = {4}の注射ではありません
basic_O1FSurj = {4}全射であります
basic_O1FSurj_neg = {4}全射ではありません
basic_OldYoungUtterance = 最も古く、誰最年少では誰ですか？
basic_Oldest = {0}最も古いものです
basic_Oldest_neg = {0}最古ではありません
basic_PropDependentN = n個に応じた提案
basic_RAntiSym = {2}反対称関係であります
basic_RComp = {6} {7}
basic_REquiv = {2}同値関係であります
basic_RFun = {4}関数関係があります
basic_RIRRefl = {2}非反射関係であります
basic_RInj = {4}単射関係があります
basic_RInv = {4} ⁻¹
basic_RRefl = {2} relflexive関係であります
basic_RSurj = {4}全射関係があります
basic_RSym = {2}対称関係であります
basic_RTot = {4}の合計関係があります
basic_RTotLeft = {4}左総関係があります
basic_RTrans = {2}推移関係であります
basic_ScottishUtterance = ルールは誰がクラブで受け入れられないことができるように厳しいです。
basic_Set = アンサンブル
basic_ToBeHuman = 人間であることを
basic_ToBeHuman_neg = 人間ではありません
basic_ToBeMortal = 致命的であるために
basic_ToBeMortal_neg = 致命的ではありません
basic_ToBeSocrate = ソクラテスことにします
basic_ToBeSocrate_neg = ソクラテスではありません
basic_WearAKilt = キルトを着用します
basic_WearAKilt_neg = キルトを身に着けていません
basic_WearRedSocks = 赤い靴下を着用します
basic_WearRedSocks_neg = 赤い靴下を着用していません
basic_WhiteHat = 白
basic_Youngest = {0}最年少であります
basic_Youngest_neg = {0}最年少ではありません
basic_addition = 追加することによって、 {0}
basic_and = そして
basic_and_sci = ∧
basic_app_fun_exset = {2} {3} ）
basic_app_prop = {1} {2} ）
basic_app_prop2 = {1} {2} {3} ）
basic_app_prop2_sci = {1} {2} {3} ）
basic_app_prop_sci = {1} {2} ）
basic_app_rel = {1} {0} {2}
basic_app_rel_sci = {1} {0} {2}
basic_are_collinear = {0}同一直線上にあります
basic_are_collinear_neg = {0}同一直線上にありません
basic_are_parallel = {0}と{1}平行であり、
basic_are_parallel_neg = {0}と{1}平行ではありません
basic_arith_elim = 等差数列の定義により、
basic_case = ケース{0} {1}
basic_demonstrate_lim = その証明は{0}の持つ限界を{1}
basic_determine = 決定{0}
basic_determine_lim = 限界を決定する{0}
basic_determine_reason = シリーズの共通の差を求める{0}
basic_determine_value = 値を決定する{0}
basic_development = 膨張により
basic_division = 割る{0}
basic_division_and_multiplication = 割ると乗算{0}
basic_elim_is_solution_equiv = 定義により
basic_elim_limit_expr_b = 左または右の制限の定義により、
basic_elim_rewrite_equiv = 書き換えることにより、
basic_eq_symmetry_equiv = 平等関係の対称性によって、
basic_equation = 式{1}
basic_equation_systeq = 方程式系{1}
basic_equiv = {0} {数学：⇔} {1}
basic_equiv1 = {0} {数学：⇔} {1}
basic_equiv1_sci = {0} {数学：⇔} {1}
basic_equiv_sci = {0} {数学：⇔} {1}
basic_expansion = 拡大することにより
basic_expansion_of_power = 権力の定義により、
basic_expr_is_defined_on = {1}で定義されている{2}
basic_expr_is_defined_on_neg = {0}に定義されていません{1}
basic_factorization = ファクトライズすることにより
basic_findLimitExpr = 限界値を決定する{1}ように{2}
basic_find_asymptot = 漸近挙動{見つける} {2}で{3}
basic_find_expr = 値{見つける} {0} {justTagsを}
basic_find_limit = 制限を{見つける} {2}のxアプローチとして{3} {justTags}
basic_find_limit_type = 行動{見つける} {4}無限遠
basic_find_series_type = シリーズの種類を{見つける} {0}
basic_floor_id = 床
basic_fun_has_finite_limit = {4}収束であります
basic_fun_has_lower_bound = {4}以下に制限されます
basic_fun_has_upper_bound = {4}上記制限され
basic_fun_is_bounded = {4}制限されています
basic_fun_is_constant = {4}定数であります
basic_fun_is_decreasing = {4}減少しています
basic_fun_is_decreasing_neg = {4}減少していません
basic_fun_is_defined_on = {4}で定義されている{5}
basic_fun_is_gt_zero = {4}厳密に正であります
basic_fun_is_increasing = {4}増加しています
basic_fun_is_increasing_neg = {4}増加していません
basic_fun_is_lt_zero = {4}負であります
basic_gen_app_rel = {5} {4} {6}
basic_gen_app_rel_sci = {5} {4} {6}
basic_geoconstr = 建設により{0}
basic_id = {0}
basic_imply = ほのめかす
basic_imply_sci = {数学：⇒}
basic_ind_basic_evar_0 = 初期のランク
basic_is_a_neighborhood = {1}の近傍である{2}
basic_is_add_increasing = さらには、関係のために増加している' {0} '
basic_is_aware = {0}ことを知っている{1}
basic_is_aware_neg = {0}ことを知りません{1}
basic_is_bad = {0} swindlecantです
basic_is_big_enough = {0}大きいです
basic_is_crossed = 四辺形{0}交差します
basic_is_crossed_neg = 四辺形{0}交差していません
basic_is_defined_on = {0}に定義されている{1}
basic_is_definition_set = {0}の定義の集合である{1}
basic_is_element = {1} {数学：ε} {2}
basic_is_element_dom = {0} {数学：ε} {1}
basic_is_element_neg = {1}に属していない{2}
basic_is_element_sci = {1} {数学：ε} {2}
basic_is_element_sci_neg = {1} {数学：∉} {2}
basic_is_even = {0}偶数であります
basic_is_good = {0} honestantです
basic_is_in_neighbourhood_of = {0}の周辺にある{1}
basic_is_integer = {0}整数です。
basic_is_lci = {0}上の二項演算がある{1}
basic_is_lci_neg = {0}でバイナリ操作ではありません{1}
basic_is_middle_segment = {0} 、セグメントの中間点である{1}
basic_is_middle_segment_neg = {0}セグメントの中点ではありません{1}
basic_is_monotonic_on = {1}に減少している{2}
basic_is_multiple_of = {0}で割り切れる{1}
basic_is_multiple_of_neg = {0}で割り切れない{1}
basic_is_odd = {0}奇数であります
basic_is_parallelogram = {0}平行四辺形であります
basic_is_parallelogram_neg = {0}平行四辺形ではありません
basic_is_partition = {1}のパーティションがある{0}
basic_is_polynom = {1}多項式であります
basic_is_projected_on = {0}の正射影である{1}の{2}
basic_is_reflexive = 関係' {0} '反射的です
basic_is_restriction = {5}の制限である{6}に{2}
basic_is_solution = {0}の解の集合は{1}
basic_is_solution_neg = {0}の解決策ではありません{1}
basic_is_symmetric = {0}の対称である{2}に対して{1}
basic_is_transitive = 関係' {0} '推移であります
basic_isolate = 隔離{0}
basic_knows_hatcolor = {0}自分の帽子の色を知っています
basic_knows_hatcolor_neg = {0}自分の帽子の色を知りません
basic_le = ≤
basic_lor_elim = 十分な仮説
basic_multiplication_and_division = 乗算とで割ることにより、 {0}
basic_nats = {0}と{1}
basic_neighborset = {1}
basic_not = しません
basic_not_sci = ¬
basic_oldyoung = 最古の最年少
basic_or = または
basic_or_sci = ∨
basic_pis_element = {2}に属する{3}
basic_pis_element_neg = {1}に属していない{2}
basic_pis_element_sci = {2} {数学：ε} {3}
basic_pis_element_sci_neg = {1} {数学：∉} {2}
basic_proddecompr = 分解による
basic_proddownshift = インデックスのシフトによって
basic_pset3 = {0} {1}と{2}
basic_rel_is_defined_on = {0}に定義されている{1}
basic_rel_is_defined_on_neg = {0}に定義されていません{1}
basic_rel_le = ≤
basic_resolve = 解決{0}
basic_rewrite_in = {1}に書き換えられる{2}で{0}
basic_ror_elim = 十分な仮説
basic_say = {0}と言う{1}
basic_set_lt = {0} ⊂ {1}
basic_set_lteq = {1} ⊆ {2}
basic_shas_finite_limit = {0}収束です
basic_shas_limit = {0}の制限があります{1}
basic_shas_limit_neg = {0}の制限はありません{1}
basic_sigmadecompr = シグマを分解することにより、
basic_sigmadownshift = インデックスの違いによる
basic_sis_arith = {0}算術であります
basic_sis_arith_neg = {0}算術ではありません
basic_sis_arith_reason = {2}の理由のための演算である{3}
basic_sis_arith_reason_neg = {2}のための演算ではありません{3}
basic_sis_caracterized = シリーズです{0}算術や幾何学？
basic_sis_element = {0} {数学：ε} {1}
basic_sis_element_neg = {0} {数学：∉} {1}
basic_sis_element_sci = {0} {数学：ε} {1}
basic_sis_element_sci_neg = {0} {数学：∉} {0}
basic_sis_geo = {0}幾何学的なシリーズです
basic_sis_geo_neg = {0}等比級数ではありません
basic_sis_geo_reason = {2}公比と幾何学的である{3}
basic_sis_geo_reason_neg = {2}のための一般的な比率で等比級数ではありません{3}
basic_subtraction = 減算することにより、 {0}
basic_subtraction_and_addition = 減算または加算することにより{0}
basic_triv_div_lr = 二つの部材を分割することにより{0}
basic_true_at_rank = {0}ランクで真である{1}
basic_true_at_rank_neg = {0}ランク上の偽である{1}
basic_true_at_rank_sci = {0} {1} ）
basic_true_at_rank_sci_neg = ¬ {0} {1} ）
basic_uprod = {0} × {1}
basic_wears_hat = {0}の帽子を身に着けている{1}
basic_wears_hat_neg = {0}着用していない{1}の帽子を
help_part_content = コンテンツ
help_part_paper = デジタル紙
help_section_browsing = ナビゲーション
help_section_commutativity = 交換性
help_section_evar = 推論変数
help_section_exercises = 演習
help_section_proof = 証明
help_section_selection = 選択
help_section_trophy = Cockades
help_section_unification = 単一化
key_Product = 製品
key_access_content = コンテンツ
key_access_date = 日付
key_access_role = 役割
key_access_role_ref = 管理者
key_access_role_user = 学生
key_account = マイアカウント
key_add = 加えます
key_add_exercise_message = 運動の発話を入力し...
key_add_exercise_title = 新しい運動のための要求
key_and = そして
key_apply = 適用します
key_ask_hint_button = ヒント
key_assume = 引き受けます
key_back_connection_panel = 前の画面に戻って取得するには、
key_browsing_train = 演習
key_by = {0}
key_cancel = キャンセル
key_catchme = 私を捕まえて
key_change_password = パスワードを変更する
key_chapters = チャプター
key_character_not_available = 文字は使用できません
key_check_box = チェックボックス
key_check_cgu = GTU
key_check_text_cgu = 受け入れます
key_class = クラス
key_class_default_message = いいえクラスが見つかりませんでした。
key_click_here = ここをクリック
key_clickme = ここをクリック
key_clickme_fix = それを修正し、検証するためにこちらをクリック
key_clickme_valid = 検証するには、ここをクリックしてください
key_commuteme = 次の値を下回って取得します。
key_conclusion = 結論
key_confirm_delete_tab_message = スコープを削除しますか？
key_confirm_delete_tab_message_yes = はい
key_confirm_password = パスワードを認証する
key_confirm_quit_exercise = 練習をあきらめますか？
key_congrats = よくやった、運動が証明されました！
key_connection = 接続
key_construct = 構築します
key_context = コンテキスト
key_create_account = アカウントを作成する
key_create_account_connect = アカウント/ログインを作成します。
key_credits = トークン
key_credits_content_message = 直接アプリケーションコンテンツを購入します。
key_credits_content_title = コンテンツ
key_credits_pack_message = トークンを持つアプリケーション内のコンテンツのロックを解除します。
key_credits_pack_pack1_title = 発見
key_credits_pack_pack2_title = トレーニング
key_credits_pack_pack3_title = 究極
key_credits_pack_title = クレジット
key_deduce = 推論します
key_deduce_in = で推測
key_deduce_of = から控除
key_deduce_scope = このスコープに推論
key_delete = 削除
key_delete_account = アカウントを削除する
key_delete_account_message = 削除リンクがあなたのメールアドレスに送信されました
key_delete_message = アカウントを削除するには、タイプは、以下のテキストフ​​ィールドに「削除」して、[OK]ボタンをクリックします。
key_delete_word = DELETE
key_deleted_account = {0}アカウントが削除されました。
key_demonstrate = 証明：
key_description_back = <div>文を揃え<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - >ルールに<！ -  {タイプは= \"axiom_api\"入力= \"{axiomId}\"}  - > </ div>の
key_description_backsel = <div>文を揃え<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - >ルールに<！ -  {タイプは= \"axiom_api\"入力= \"{axiomId}\"}  - > </ div>の
key_description_delete = <div>の文を削除します<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - > </ div>の
key_description_deleteby = <！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - > </ divの>の<div>文の正当性を削除します。
key_description_for = <div>推論から<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - >と<！ -  {タイプ= \"axiom_api\"入力= \"{axiomId}\"}  - > </ DIV>
key_description_forsel = <div>推論から<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - >と<！ -  {タイプ= \"axiom_api\"入力= \"{axiomId}\"}  - > </ DIV>
key_description_inst = <！ -  {タイプ= \"exprの\"入力= \"{actTypArg2}\"}  - >から<！ -  {タイプ= \"paper_evar\"入力= \"{actTypArg}\"}  - > </ div>の値を割り当てます
key_description_section = ステートメントのオープンスコープ<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - >
key_description_success = <div>おめでとう、エクササイズ解決！</ divの>
key_description_unif = <！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - > <！ -   -  {タイプ=「タグ」入力= \"{actTypArg}\"}>文を統一し、
key_diagnostic_no_diag = この章のエントリはまだ利用できません。
key_disconnect = 切断
key_draggable_title = タイトルを移動します
key_dragme = ここにドラッグします
key_email = Eメール
key_email_not_authorized = メール許可されていません
key_email_not_found = メールが見つかりません
key_email_not_valid = メール有効ではありません
key_email_not_verif = メールが確認されません
key_email_unknown = 不明なメール
key_email_used = メール使用
key_email_valid = 有効なメール
key_empty_field = 空のフィールド
key_empty_suggest = このアクションのために利用可能な何もありません
key_error_paper_subtitle = 見つかりません
key_error_paper_title = この論文を取得することはできません
key_exercise = 運動
key_exercises = 演習
key_fill_evar = の値
key_find = 見つけます
key_firstname = ファーストネーム
key_focus_text = コンテキスト
key_forbid_mobile = アプリケーションは、モバイルでは使用できません
key_forgot_password = パスワードをお忘れですか ？
key_geo_figure = 幾何学図形
key_get_credits = クレジットを取得
key_goal = ゴール
key_got_it = とった。
key_graph = グラフ
key_group_popup_button = 加えます
key_group_popup_input_default = アクセスコード
key_group_popup_title = アクセスコードを入力してください
key_help = 助けて
key_help_tooltip_chapter_icon_all = Indiqueラ解像度のou非デTOUSレデュCHAPITREエキソサイズ。
key_help_tooltip_chapter_icon_diag = Indiqueラ解像度のou非デTOUSレエキソサイズのドタイプincontournableシュルルCHAPITRE。
key_help_tooltip_chapter_icon_tuto = Indiqueラ解像度のou非デTOUSレエキソサイズはdidacticielデュ。
key_help_tooltip_chapter_icon_unavoidable = Indiqueラ解像度のou非デTOUSレエキソサイズのドタイプincontournableシュルルCHAPITRE。
key_help_tooltip_clearall = すべてクリア
key_help_tooltip_deduce = 控除診断
key_help_tooltip_exercise_icon_diag = Exercicedébloquantル診断モード
key_help_tooltip_exercise_icon_difficulty_easy = Exerciceデdifficulté容易
key_help_tooltip_exercise_icon_difficulty_hard = Exerciceデdifficultémoyenne
key_help_tooltip_exercise_icon_difficulty_medium = Exerciceデdifficultéディフィシル
key_help_tooltip_exercise_icon_hint = 担当デ適応症アンExerciceのprenantは、非ouの。
key_help_tooltip_exercise_icon_unavoidable = Exerciceドタイプincontournable OUの非
key_help_tooltip_hint = ヒント
key_help_tooltip_justify = 正当化診断
key_help_tooltip_lock_access_no = 利用不可
key_help_tooltip_lock_access_without_deadline = アクセス可能な
key_help_tooltip_print = 印刷
key_help_tooltip_redo = やり直します
key_help_tooltip_section = スコープの作成
key_help_tooltip_undo = アンドゥ
key_help_tooltip_unify = 統一
key_hint_message = ヒントを表示するには、以下のボタンをクリックしてください
key_hintpopup_action = アクション
key_hintpopup_actions = 行動
key_hintpopup_description = 説明
key_hintpopup_preview = プレビュー
key_hintpopup_tab_desc = 説明
key_hintpopup_tab_hint = ヒント
key_home_credits_text = トークンの数
key_home_dashboard_badges = Cockades
key_home_dashboard_exercises = 解決演習
key_home_profile_text = ようこそ、{firstnameの}
key_ice = 内部エラーが発生しました。再読み込みしてください。
key_id_connection = 接続
key_if = もし
key_img_text_1 = Mettreàjourの
key_img_text_2 = ミリアン​​ペア写真・ド・プロフィール
key_inputme = 次の値を入力します。
key_justify = 正当化します
key_justify_of = の正当化
key_language = 言語
key_lastname = 苗字
key_legend = 伝説：
key_levels = レベル
key_loading_message = 読み込み中。。。待って下さい ...
key_local_theorem = 地元の定理
key_login_with = でログイン：
key_main_scope = メインスコープ
key_membership_alreadyadd = すでに追加
key_membership_error = エラー
key_membership_notfound = 未知のコード
key_membership_overused = クォータに達しました
key_modify = 修正します
key_nats = {0}と{1}
key_need_help = 助けが必要 ？
key_new_exercise = 新しいエクササイズ
key_next = 次
key_no_email_message = メール隠され、ログインできません。
key_not_yet_register = あなたはまだ登録されていない場合は、
key_ok = [OK]
key_or = または
key_password = パスワード
key_password_confirmed = パスワード確認
key_password_current = 現在のパスワード
key_password_incorrect = 不正なパスワード
key_password_new = 新しいパスワード
key_password_not_confirmed = パスワードが確認されていません
key_password_too_short = パスワードが短すぎます（最低6文字）であります
key_password_valid = 有効なパスワード
key_password_with_digit = パスワードには、少なくとも1つの数字を含んでいなければなりません
key_preview = プレビュー
key_profile_informations = プロフィール情報
key_proof_of = の証明
key_propdeftag_def = 定義
key_propdeftag_prop = 命題
key_prove_text = 証明
key_prove_text_close = 証明...
key_prove_text_open = 証明：
key_register = 登録
key_registration = 登録
key_reinit = リセット
key_reinit_password = あなたのパスワードをリセットするには、メールアドレスを入力してください。
key_reinit_password_message = リセットリンクはあなたのメールアドレスに送信されました。
key_report_input_default = フィードバックを与えるか、助けを求めます
key_report_label = 私達にメッセージを送ります
key_report_label_email = メールアドレス：
key_report_message_sent = メッセージが送信されました！
key_report_modify_message = 編集メッセージ
key_report_next = 次
key_report_placeholder_email = 電子メールアドレス
key_report_recontact = 私たちはあなたに戻って取得します。
key_report_send = 送信
key_require_message = この章にアクセスするには、以下の章の花形帽章「チュートリアル」を取得します：
key_require_message_exercise = この演習にアクセスするには、以下の章の花形帽章「チュートリアル」を取得します：
key_require_message_part = 以下の章へのアクセスのための「チュートリアル」cockadesを取得
key_required = 前提条件
key_save = セーブ
key_scroll_down = 下へスクロール
key_scroll_up = スクロールアップする
key_segments = セグメント
key_selectme = 上記の値を選択します
key_send = 送信
key_social_login = <divクラス= \" {0} \"> <aのtarget=\"_blank\" href=\"http://en.wikipedia.org/wiki/Social_login\" class=\" {1} \">ソーシャルログインする</a>です最も簡単で安全な方法は、サインインすると、ログイン。何もあなたの \"壁\"に公開されません。 </ divの>の<divクラス= \" {2} \">のいずれかのボタンをクリックするは、<a target=\"_blank\"のhref=\" {3} {4} \">を受け入れている私たちの条件の使用して、当社の機密保持ポリシー</a>に。 </ DIV>
key_sorry_whitelist = アプリケーションは使用できません。 contact@edukera.com：とあなたがサインアップする場合は、にメールを送信してください。
key_start = 開始
key_status_report = 問題を報告します
key_step_choice_axiom = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >の部分では、<スパンクラス= \"ヒントテキスト\"> <！ -  {タイプ= \"label_toolbox\"入力= \"{ TPartId} \"}  - > </ span>の<！ -  {=タイプ\" toolbox_button \"入力=\" {TPartId} \"}  - をクリックして>アクセスツールボックスの章<！ -  {タイプ=\" label_toolbox \"入力= 「{TChapterId} \"}  - > <！ -  {タイプ=\" toolbox_button \"入力=\" {TChapterId} \"}  - > <！ -  {タイプ=\" hint_check \"}  - > </ div>の
key_step_choice_axiom_in_diag = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >を選択し、ルール<！ -  {タイプ= \"diag_axiom\"入力= \"{axiomId}\"}  - >セクション内の< ！ -  {タイプ= \"diag_axiom_part\"入力= \"{TSectionId}\"}  - > <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_choice_question_tab = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - > [選択]タブに<！ -  {タイプ= \"question_tab\"入力= \"{tabQuestionValue}\"}  - > <！ -  -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_choice_tab_index_in_diag = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >タブをクリックします<！ -  {タイプ= \"diag_tab\"入力= \"{actIdx}\"}  - > <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_click_apply = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >をクリックします<！ -  {タイプ= \"button_apply\"}  - > 'プレビューセクション'インチ<！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_click_deduce = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >をクリックします<！ -  {タイプ= \"button_deduce\"}  - > <の！ -  {タイプ= \"propdeftag 「入力= \"{STATEMENTID}\"}  - > <！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - >診断ウィンドウを表示します。 <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_click_justify = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >をクリックします<！ -  {タイプは= \"button_justify\"}  - >ステートメント<の！ -  {タイプ= \"タグ「入力= \"{STATEMENTID}\"}  - >診断ウィンドウをdiaplyします。 <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_delete = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >ステートメントを削除します<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - > <！ -  -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_deleteby = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >文の正当性を削除します。<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - > < ！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_drag = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >ドラッグルール<！ -  {タイプは= \"toolbox_item\"読み取り専用= \"true\"を入力= ​​\"{axiomId}\" }  - >セクションから<！ -  {タイプ= \"label_toolbox\"クラス= \"ツールボックスセクションタイトル-コンテンツ「入力=\" {TSectionId} \"}  - >。 <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_drop = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >ステートメントの上にドロップします。<！ -  {タイプ= \"propdeftag\"入力= \"{STATEMENTID}\"}  - > < ！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - > <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_enter_expr_in_diag = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >の値を入力します。<！ -  {タイプ= \"exprの\"文= \"{STATEMENTID}\"入力= \"{actArgItemSecond}\" }  - >証明変数のvirutalキーボードで<！ -  {タイプ= \"EVAR\"入力= \"{evarId}\"}  - > <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_inst = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >の値を入力します。<！ -  {タイプ= \"exprの\"入力= \"{actTypArg2}\"}  - > <ための！ -  {タイプ= \"paper_evar\"入力= \"{actTypArg}\"}  - > <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_open_toolbox = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >開くツールボックスをクリックすることで、<！ -  {タイプ= \"toolbox_header_button\"}  - > <！ -  {タイプ= } \"hint_check\"  - > </ div>の
key_step_section = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >をクリックします<！ -  {タイプ= \"button_section\"}  - >文の<！ -  {タイプ= \"タグ「入力= \"{STATEMENTID}\"}  - > <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_selection = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >を選択し、ステートメントの<！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - >、この用語は、以下の青色でhilighted：<！ -  {タイプ= \"小道具\"文= \"{STATEMENTID}\"入力= \"{selectionProp}\"}  - >！<BR>の<div> < -  {タイプ= \"hint_check \"}  - > </ div>の</ DIV>
key_step_unification = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >をクリックします<！ -  {タイプ= \"button_unify\"入力= \"{actTypArg}\"}  - >文の< ！ -  {タイプ=「タグ」入力= \"{STATEMENTID}\"}  - > <！ -  {タイプ= \"hint_check\"}  - > </ div>の
key_step_unify_in_diag = <divクラス= \"命令-アイテム\"> <！ -  {タイプ= \"hint_itemize\"}  - >をクリックします<！ -  {タイプ=入力を \"button_unify\" = \"{actUnifItem}\"}  - > <！ -  -  {タイプ= \"hint_check\"}  - > </ div>の
key_sub_subscription_sentence = ありがとうございました ！確認リンクあなたのメールアドレスに送信されました。
key_success_trophy_message = おめでとう、あなただけの章のために、花形帽章{trophyId}を取得{chapterId}
key_success_trophy_title = 花形帽章{trophyId}
key_task_justify_label = 正当化します
key_then = その後
key_toolbox_error_message = このルールは、このステートメントには適用されません。
key_tooltip_axiom_close = 非表示式
key_tooltip_axiom_open = 表示式
key_tooltip_context_close = ディスプレイコンテキスト
key_tooltip_context_open = 非表示のコンテキスト
key_tooltip_section_close = スコープを隠します
key_tooltip_section_open = 表示範囲
key_trophy_diagnostic = 診断
key_trophy_exercises = 2010年度
key_trophy_tutorial = チュートリアル
key_trophy_unavoidable = 避けられません
key_tutorial = チュートリアル
key_uid = ID
key_unlock = アンロック
key_update_browser = あなたは現在、バージョン{CURRENT_VERSION}で{ブラウザ}を使用しています。このバージョンは、edukeraアプリケーションと互換性がありません。 、ブラウザを更新したり、変更してください。
key_usage = 使用法
key_utterance = 発話
key_validate = 検証
key_with = ととも​​に
key_without_hint = この演習にはヒントがありません。
key_yes = はい
pager_account = マイアカウント
pager_adabusrdum = 広告absurdum
pager_algebra = 代数
pager_algebra_structures = 構造algébriques
pager_algebra_structures_01 = 
pager_analysis = 分析
pager_analysis_induction = 誘導
pager_analysis_limits = 境界
pager_analysis_series = シリーズ
pager_analysis_series_05 = 
pager_badges = Cockades
pager_classical = 古典的な
pager_comb = 連立方程式
pager_commutativity = 交換性
pager_credits = クレジット
pager_dashboard = ダッシュボード
pager_demo_bernoulli_1 = ベルヌーイの不等式1
pager_demo_bernoulli_2 = ベルヌーイの不等式2
pager_demo_medium_ex_02 = 可分性
pager_demo_seg = 結石
pager_demo_tuto_app = アプリケーション
pager_demo_tuto_comb = 組み合わせ
pager_demo_tuto_first = 初期段階
pager_demo_tuto_fun = 定義
pager_demo_tuto_neq = 不平等
pager_demo_tuto_rel = 移行性
pager_demo_tuto_serie = 1 / Nの上限
pager_demo_tuto_sigma = 最初のn個の整数の和
pager_demorgan = ド・モルガン
pager_easy = 簡単に
pager_enigma = エニグマ
pager_eq_seg = 平等
pager_eqothers = 混合物
pager_existence = 存在
pager_expansion = 分配性
pager_finj = 圧入性
pager_funpigeon = 鳩の巣原理
pager_funsurj = Surjectivity
pager_good_bad = 真実と嘘
pager_hard = ハード
pager_ind_bernouilli = 不等式
pager_ind_divis = 可分性
pager_ind_sum = 和の計算
pager_ineq_ex_15 = オペレーション
pager_ineq_ex_20 = 組み合わせ
pager_ineq_ex_22 = ダブル不平等
pager_ineq_ex_24 = アプリケーション
pager_ineq_ex_25 = 関係
pager_ineq_seg = 不平等
pager_ineq_system = 不等式のシステム
pager_ineqs = 不等式
pager_limits_finite = 有限時点での機能の制限
pager_limits_inf = 無限遠の機能制限
pager_limits_prop = 定義によってプロパティ
pager_limits_series = eries制限
pager_logic = 論理
pager_logic_connector = コネクタ
pager_logic_connector_abs_peirce = 削減広告absurdiumによってパースの法則
pager_logic_connector_associativity = 結合規則
pager_logic_connector_classical = 古典論理
pager_logic_connector_constructivism = 構成主義の論理
pager_logic_connector_deMorgan_laws = ド・モルガンの法則
pager_logic_connector_distributivity = 分配特性
pager_logic_connector_ex_easy_01 = 和の分配性
pager_logic_connector_ex_easy_02 = 接続詞の分配性
pager_logic_connector_ex_easy_06 = 整数の宇宙1/2
pager_logic_connector_ex_easy_08 = 三段論法
pager_logic_connector_ex_easy_12 = ド・モルガンの法則3/3
pager_logic_connector_ex_easy_13 = ド・モルガンの法則1/3
pager_logic_connector_ex_easy_14 = 接続詞の連想
pager_logic_connector_ex_easy_16 = 対偶1/2
pager_logic_connector_ex_easy_17 = 対偶2/2
pager_logic_connector_ex_easy_27 = 和の連想
pager_logic_connector_ex_easy_31 = 広告absurdium推論
pager_logic_connector_ex_easy_32 = ド・モルガンの法則2/3
pager_logic_connector_ex_easy_33 = 和の分配性
pager_logic_connector_ex_easy_34 = 接続詞の分配性
pager_logic_connector_negation = 否定
pager_logic_connector_peirce_abs_te = パースの法則による還元広告absurdium
pager_logic_connector_peirce_law = パースの法則
pager_logic_connector_reasoning = 推論
pager_logic_connector_training = 基本原則
pager_logic_connector_tuto_01 = 併せから推測するには
pager_logic_connector_tuto_02 = 接続詞を証明するために、
pager_logic_connector_tuto_03 = 和を証明するために、
pager_logic_connector_tuto_04 = 事例ベース推論
pager_logic_connector_tuto_06 = 含意を証明するために、
pager_logic_connector_tuto_07 = 含意から推測するには
pager_logic_connector_tuto_08 = 否定を証明するために
pager_logic_connector_tuto_085 = 否定から推測するには
pager_logic_connector_tuto_09 = 例偽クオドリベット
pager_logic_connector_tuto_10 = 排中律
pager_logic_function = 機能
pager_logic_quantifer_tuto_2 = 整数の宇宙2/2
pager_logic_quantifier = 量指定子
pager_logic_quantifier_21 = スコットランドのクラブ
pager_logic_quantifier_ex_01 = 労働組合の分配性
pager_logic_quantifier_ex_02 = 交差点の分配性
pager_logic_quantifier_ex_03 = ド・モルガン法1/2
pager_logic_quantifier_ex_04 = ド・モルガンの法則2/2
pager_logic_quantifier_ex_05 = 累乗集合
pager_logic_quantifier_ex_06 = デカルト積の分配性
pager_logic_quantifier_ex_07 = 実存分配性
pager_logic_quantifier_ex_easy_08 = ド・モルガンの法則2/2
pager_logic_quantifier_ex_easy_09 = ド・モルガンの法則1/2
pager_logic_quantifier_ex_le_01 = よりも少ない
pager_logic_quantifier_ex_le_02 = （2）未満であります
pager_logic_quantifier_ex_le_03 = （3）未満であります
pager_logic_quantifier_ex_le_04 = HonestantsとSwindlecants 1/4
pager_logic_quantifier_ex_le_05 = HonestantsとSwindlecants 2/4
pager_logic_quantifier_ex_le_06 = HonestantsとSwindlecants 3/4
pager_logic_quantifier_ex_le_07 = HonestantsとSwindlecants 4/4
pager_logic_quantifier_ex_le_08 = インバース、インジェクション
pager_logic_quantifier_ex_le_10 = 合計関係
pager_logic_quantifier_ex_le_13 = 鳩の巣原理1/2
pager_logic_quantifier_ex_le_14 = 鳩の巣原理2/2
pager_logic_quantifier_ex_le_15 = 二項関係
pager_logic_quantifier_ex_le_37 = デカルト積の分配性
pager_logic_quantifier_ex_le_40 = 機能、注射
pager_logic_quantifier_ex_le_41 = 全射機能
pager_logic_quantifier_ex_le_42 = 退縮、全単射
pager_logic_quantifier_ex_le_43 = 組成
pager_logic_quantifier_ex_le_48 = 広告absurdium推論によって排中律
pager_logic_quantifier_ex_le_52 = 平等の対称性
pager_logic_quantifier_ex_le_53 = 平等の推移
pager_logic_quantifier_ex_le_54 = インクルージョンの推移
pager_logic_quantifier_ex_le_67 = 等式の交点
pager_logic_quantifier_ex_le_68 = 等式の連合
pager_logic_quantifier_ex_le_69 = 介在物の交差点
pager_logic_quantifier_ex_le_70 = 介在物の連合
pager_logic_quantifier_ex_le_71 = さん混乱させる
pager_logic_quantifier_ex_le_72 = 三帽子の謎
pager_logic_quantifier_tuto_01 = 存在を証明します
pager_logic_quantifier_tuto_02 = 存在を推定します
pager_logic_quantifier_tuto_03 = 定理を証明します
pager_logic_quantifier_tuto_04 = 定理から推測するには
pager_logic_relation = 関係
pager_logic_relation_tuto_01 = 関係のグラフ
pager_logic_relation_tuto_04 = 等価
pager_logic_relation_tuto_05 = 組成
pager_logic_set_rewrite_01 = 書き換え
pager_logic_set_rewrite_03 = 結合性
pager_logic_set_rewrite_04 = 交換性
pager_logic_set_rewrite_05 = 簡素化
pager_logic_set_rewrite_06 = 開発/ファクタリング
pager_logic_set_rewrite_08 = 平等の対称性
pager_logic_set_rewrite_09 = 平等の推移
pager_logic_set_rewrite_10 = インクルージョンの推移
pager_logic_set_rewrite_11 = 組み合わせ
pager_logic_settheory_tuto_01 = 交差点
pager_logic_settheory_tuto_02 = 連合
pager_logic_settheory_tuto_03 = 差
pager_logic_settheory_tuto_04 = 補体
pager_logic_settheory_tuto_05 = インクルージョン
pager_logic_settheory_tuto_06 = 平等
pager_logic_settheory_tuto_07 = 空集合
pager_logic_settheory_tuto_08 = 累乗集合
pager_logic_settheory_tuto_09 = デカルト積
pager_lrops = 左右に操作
pager_medium = ミディアム
pager_relcar = セット製剤
pager_relcomp = 組成
pager_relequiv = 等価
pager_relinv = 逆
pager_relle = 関係 \"≤\"
pager_reltrans = 移行性
pager_rew_almostsquare = ほぼ完璧な正方形
pager_rew_conjugate = 共役値
pager_rew_equation = 方程式
pager_rew_factorize = Factorisations
pager_rew_gold = ゴールド番号
pager_rew_system = 連立方程式
pager_rew_tuto_develop = 開発
pager_rew_tuto_fact1 = 因数分解
pager_rew_tuto_fact2 = 顕著な分解
pager_rew_tuto_group = グルーピング
pager_rew_tuto_idrem1 = 違いデcarrés
pager_rew_tuto_idrem2 = 正方形の違い
pager_rew_tuto_misc1 = 交換性
pager_rew_tuto_misc2 = 書き換え
pager_rew_tuto_op = オペレーション
pager_rew_tuto_simpl = 単純化
pager_rew_tuto_simpl2 = 共通点
pager_rew_tuto_varchange = 変数変換
pager_rewrite_seg = 書き換え
pager_root = ホーム
pager_series_arith = 等差数列
pager_series_arithgeo = Arithmetico、幾何学的なシーケンス
pager_series_bounded = 有界シーケンス
pager_series_ex_01 = 
pager_series_geo = 幾何学的なシーケンス
pager_series_variation = 単調性
pager_set_operators = 演算子
pager_set_rewoperators = 設定結石
pager_setcomb = 組み合わせ
pager_setdemorgan = ド・モルガン
pager_setdistrib = 分配特性
pager_setinclusion = 含まれるもの
pager_setprop = プロパティ
pager_settheory = セット
pager_sigma_ex_15 = 最初の整数の和
pager_sigma_ex_16 = 最初の正方形の和
pager_sigma_ex_18 = 分解
pager_sigma_ex_19 = 協会
pager_sigma_ex_20 = インデックスシフト
pager_sigma_ex_21 = 最初の電力の合計
pager_sigma_ex_22 = 直線性
pager_sigma_ex_23 = 顕著和
pager_sigma_ref = スタンダード和
pager_sigma_seg = シグマ
pager_sigma_telescop = 伸縮シリーズ
pager_sigma_withref = 標準の和を用いて、
pager_syllogism = 三段論法
toolbox_analysis = 分析
toolbox_appdef = 関数定義
toolbox_arith_series = 等差数列
toolbox_binrel = 2項関係
toolbox_calculus = 結石
toolbox_combinaison = Combinaisons
toolbox_conjunction = 接続詞
toolbox_connector = コネクタ
toolbox_converge = 収束
toolbox_disjonction = 分離
toolbox_distrib = 分配性
toolbox_eq = 平等
toolbox_eqfun = 平等
toolbox_eqrel = Equal relation
toolbox_eqset = Equality
toolbox_equiv = Equivalence
toolbox_exists = Existential quantifier
toolbox_fact = Factorial
toolbox_forall = Universal quantifier
toolbox_function = Function
toolbox_funop = Functional operators
toolbox_geo_series = Geometric sequence
toolbox_implication = Implication
toolbox_induction = Récurrence
toolbox_ineq = Inequality
toolbox_ineqapp = Applications
toolbox_ineqbound = Double inequality
toolbox_ineqcomb = Combinations
toolbox_ineqconv = Conversions
toolbox_ineqrel = Relation
toolbox_leftright = Operations to the left and right
toolbox_leftright_ineq = Operations to the left and right
toolbox_leftright_neq = Inequality
toolbox_limfinite = Limit at a point
toolbox_limitinf = Limit at infinity
toolbox_limitops = Operations
toolbox_limits = Limit
toolbox_logic = Logic
toolbox_logicothers = Classical logic
toolbox_lrapply = Applications
toolbox_multiple = Divisibility
toolbox_negation = Negation
toolbox_oldest = Etre le plus agé
toolbox_operation = Operation
toolbox_operation_rewrite = Rewriting
toolbox_prod = 
toolbox_prodidx = 
toolbox_prodrem = 
toolbox_quantifier = Quantifiers
toolbox_quantifier_confuse = Mrs. Confuse
toolbox_quantifier_truthlie = Truths and lies
toolbox_relation = Relation
toolbox_relops = Relational operators
toolbox_relothers = Remarkable Relations
toolbox_relprop = Relation
toolbox_relset = Set relations
toolbox_remid = Remarkable rewritings
toolbox_rewops = Operations
toolbox_rewprops = Rewritings
toolbox_rewrite = Rewriting
toolbox_series = Series
toolbox_series_limitation = Bounding
toolbox_series_sign = Sign
toolbox_series_variation = Monotonicity
toolbox_set = Set
toolbox_set_comb = Combinations
toolbox_set_rewriting = Rewritings
toolbox_setexpr = Set formulation
toolbox_setfun = Function
toolbox_setgraph = Graphe de relation
toolbox_setops = Operations
toolbox_sigma = Sigma rewriting
toolbox_sigmaidx = Index shiftings
toolbox_sigmarem = Identités remarquables
toolbox_simpl = Simplifications
toolbox_slteq = Inclusion
toolbox_somesets = Remarkable sets
toolbox_sophiehat = Three hats enigma
toolbox_sophiehattheory = Hat theory
toolbox_true_at_rank = True to the rank n
toolbox_truthlie = Vérités et mensonges
toolbox_youngest = Etre le plus jeune
type_BinRel_arg = binary relation on {1}
type_BinRel_dec = Let {id} be a binary relation on {1}
type_BinRel_dec_body = Let {id} be a binary relation on {1} defined by {body}
type_BinRel_exists_several = {ID}二項関係は、上に存在する{1}このような
type_BinRel_exists_simple = 上の{ID}二項関係が存在する{1}となるように
type_BinRel_forall_several = 上のすべての{ID}二項関係のため{1}
type_BinRel_forall_simple = すべての{ID}上の二項関係のため{1}
type_BinRel_letin_several = 
type_BinRel_letin_simple = 
type_BinRel_sci_arg = {1} × {1} ）
type_BinRel_sci_dec = てみましょう{ID}⊆ {1} × {1}
type_BinRel_sci_dec_body = {ID}は上の二項関係であるとする{1} {本体}で定義されました
type_BinRel_sci_exists_several = ∃{cartesian_id}⊆{cartesian_type}、
type_BinRel_sci_exists_simple = ∃{ID}⊆ {1} × {1} 、
type_BinRel_sci_forall_several = ∀{cartesian_id}⊆{cartesian_type}、
type_BinRel_sci_forall_simple = ∀{ID}⊆ {1} × {1} 、
type_BinRel_sci_letin_several = 
type_BinRel_sci_letin_simple = 
type_Child_arg = 子
type_Child_dec = {ID}は子供であるとします
type_Child_dec_body = 
type_Child_exists_several = その{ID}このような子どもたちが存在します
type_Child_exists_simple = その子{ID}は、そのような存在
type_Child_forall_several = すべての子供たちのために、{ID}、
type_Child_forall_simple = すべての子供{ID}のために、
type_Child_letin_several = 
type_Child_letin_simple = 
type_Child_sci_arg = 子
type_Child_sci_dec = {ID}は子供であるとします
type_Child_sci_dec_body = 
type_Child_sci_exists_several = その{ID}このような子どもたちが存在します
type_Child_sci_exists_simple = その子{ID}は、そのような存在
type_Child_sci_forall_several = すべての子供たちのために、{ID}、
type_Child_sci_forall_simple = すべての子供{ID}のために、
type_Child_sci_letin_several = 
type_Child_sci_letin_simple = 
type_Domain_arg = 間隔
type_Domain_dec = {ID}は間隔とします
type_Domain_dec_body = 区間{idは} {本体}で定義されてみましょう
type_Domain_exists_several = 以下のような間隔{ID}が存在し、
type_Domain_exists_simple = 区間{ID}、その結果が存在します、
type_Domain_forall_several = すべての間隔{ID}のために、
type_Domain_forall_simple = すべての間隔の{ID}
type_Domain_letin_several = 
type_Domain_letin_simple = 
type_Domain_sci_arg = 間隔
type_Domain_sci_dec = {ID}は間隔とします
type_Domain_sci_dec_body = てみましょう{ID} = {本体}
type_Domain_sci_exists_several = ∃{ID}、
type_Domain_sci_exists_simple = ∃{ID}、
type_Domain_sci_forall_several = ∀{ID}、
type_Domain_sci_forall_simple = ∀{ID}、
type_Domain_sci_letin_several = 
type_Domain_sci_letin_simple = 
type_ExSet_arg = {ID}
type_ExSet_dec = {ID}は集合とします
type_ExSet_dec_body = {ID}が{本体}で定義された集合とします
type_ExSet_exists_several = その結果、集合{ID}が存在します
type_ExSet_exists_simple = そのような集合{IDを}が存在します
type_ExSet_forall_several = すべての集合{ID}のために、
type_ExSet_forall_simple = すべてのセットの{ID}
type_ExSet_letin_several = 
type_ExSet_letin_simple = 
type_ExSet_sci_arg = {ID}
type_ExSet_sci_dec = {ID}は集合とします
type_ExSet_sci_dec_body = {ID}が{本体}で定義された集合とします
type_ExSet_sci_exists_several = その結果、集合{ID}が存在します
type_ExSet_sci_exists_simple = そのような集合{IDを}が存在します
type_ExSet_sci_forall_several = すべての集合{ID}のために、
type_ExSet_sci_forall_simple = すべての集合{ID}のために、
type_ExSet_sci_letin_several = 
type_ExSet_sci_letin_simple = 
type_ExprFun_arg = ℝからℝする機能
type_ExprFun_dec = {ID}はℝからℝの関数とします
type_ExprFun_dec_body = {ID}が{本体}で定義されたℝへℝから関数とします
type_ExprFun_exists_several = 
type_ExprFun_exists_simple = 
type_ExprFun_forall_several = ℝへℝからのすべての機能{ID}のために、
type_ExprFun_forall_simple = ℝへℝからすべての関数{ID}のために、
type_ExprFun_letin_several = 
type_ExprFun_letin_simple = 
type_ExprFun_sci_arg = 
type_ExprFun_sci_dec = Fをしてみましょう：ℝ→ℝ
type_ExprFun_sci_dec_body = ℝ→ℝ{本体}で定義されます。fましょう
type_ExprFun_sci_exists_several = 
type_ExprFun_sci_exists_simple = 
type_ExprFun_sci_forall_several = 
type_ExprFun_sci_forall_simple = 
type_ExprFun_sci_letin_several = 
type_ExprFun_sci_letin_simple = 
type_Expr_arg = 実数
type_Expr_dec = {ID}は実数であるとします
type_Expr_dec_body = {ID}が{本体}で定義された実数であるとします
type_Expr_exists_several = そのような実数{ID}を存在
type_Expr_exists_simple = その実数{ID}は、そのような存在
type_Expr_forall_several = すべての実数{ID}のために、
type_Expr_forall_simple = すべての実数{ID}のために、
type_Expr_letin_several = 
type_Expr_letin_simple = {本体}で定義された{ID}本当の{ID}
type_Expr_sci_arg = ℝ
type_Expr_sci_dec = てみましょう{ID} {数学：ε}ℝ
type_Expr_sci_dec_body = てみましょう{ID} = {本体}
type_Expr_sci_exists_several = ∃{pair_id} {数学：ε} {cartesian_type}、
type_Expr_sci_exists_simple = ∃{ID} {数学：ε}ℝ、
type_Expr_sci_forall_several = ∀{pair_id} {数学：ε} {cartesian_type}、
type_Expr_sci_forall_simple = ∀{ID} {数学：ε}ℝ、
type_Expr_sci_letin_several = 
type_Expr_sci_letin_simple = {ID} {数学：ε}ℝ、{ID} = {本体}
type_FRel_arg = 
type_FRel_dec = 
type_FRel_dec_body = 
type_FRel_exists_several = 
type_FRel_exists_simple = 
type_FRel_forall_several = 
type_FRel_forall_simple = 
type_FRel_letin_several = 
type_FRel_letin_simple = 
type_FRel_sci_arg = {2} × {3}
type_FRel_sci_dec = Soit {ID}⊆ {2} × {3}
type_FRel_sci_dec_body = 
type_FRel_sci_exists_several = 
type_FRel_sci_exists_simple = 
type_FRel_sci_forall_several = ∀{cartesian_id}⊆{cartesian_type}、
type_FRel_sci_forall_simple = ∀{ID}⊆ {2} × {3} 、
type_FRel_sci_letin_several = 
type_FRel_sci_letin_simple = 
type_FunDef_arg = 上で定義された関数{2}
type_FunDef_dec = {ID}は上に定義された関数とする{2}
type_FunDef_dec_body = {ID}は上に定義された関数とする{2} {本体}によって
type_FunDef_exists_several = 上の{ID}関数が存在し{2}その結果は、
type_FunDef_exists_simple = {ID}で定義された関数が存在する{2}その結果は、
type_FunDef_forall_several = 上で定義されているすべての関数の{2} {ID}、
type_FunDef_forall_simple = 上で定義されているすべての関数の{2} {ID}、
type_FunDef_letin_several = 
type_FunDef_letin_simple = {ID}は上の関数である{2} {本体}によって
type_FunDef_sci_arg = {2} → {2}
type_FunDef_sci_dec = てみましょう{ID}： {2} → {2}
type_FunDef_sci_dec_body = てみましょう{idは}： {2} → {2} {本体}で定義されました
type_FunDef_sci_exists_several = ∃{pair_id}： {2} → {2} 、
type_FunDef_sci_exists_simple = ∃{ID}： {2} → {2} 、
type_FunDef_sci_forall_several = ∀{pair_id}： {2} → {2} 、
type_FunDef_sci_forall_simple = ∀{ID}： {2} → {2} 、
type_FunDef_sci_letin_several = 
type_FunDef_sci_letin_simple = {ID}は上の関数である{2} {本体}によって
type_FunUnknown_arg = 関数
type_FunUnknown_dec = {ID}は関数とします
type_FunUnknown_dec_body = {ID}は上に定義された関数とする{0} {2} {本体}により{/ 0}
type_FunUnknown_exists_several = などの機能{ID}が存在し、
type_FunUnknown_exists_simple = 関数{ID}、その結果が存在します、
type_FunUnknown_forall_several = すべての機能{ID}のために、
type_FunUnknown_forall_simple = すべての関数{ID}のために、
type_FunUnknown_letin_several = 
type_FunUnknown_letin_simple = {ID}は{本体}で定義された関数であります
type_FunUnknown_sci_arg = {0} → {1}
type_FunUnknown_sci_dec = てみましょう{ID}： {0} → {1}
type_FunUnknown_sci_dec_body = てみましょう{idは}： {0} → {1} {本体}で定義されました
type_FunUnknown_sci_exists_several = ∃{pair_id}： {0} → {1} 、
type_FunUnknown_sci_exists_simple = ∃{ID}： {0} → {1} 、
type_FunUnknown_sci_forall_several = ∀{pair_id}： {0} → {1} 、
type_FunUnknown_sci_forall_simple = ∀{ID}： {0} → {1} 、
type_FunUnknown_sci_letin_several = 
type_FunUnknown_sci_letin_simple = 
type_Fun_arg = 関数{2}の{3}
type_Fun_dec = {idは}から関数とする{2}の{3}
type_Fun_dec_body = {idは}から関数とする{2}の{3} {本体}で定義されました
type_Fun_exists_several = {ID}関数が存在し{2}の{3} 、
type_Fun_exists_simple = {ID}関数形が存在する{2}の{3} 、
type_Fun_forall_several = 以下からのすべての機能{ID}の{2}の{3}
type_Fun_forall_simple = すべての関数{ID}の{2}の{3} 、
type_Fun_letin_several = 
type_Fun_letin_simple = {ID}はからアプリケーションです{2}の{3} {本体}で定義されました
type_Fun_sci_arg = {2} → {3}
type_Fun_sci_dec = てみましょう{ID}： {2} → {3}
type_Fun_sci_dec_body = てみましょう{idは}： {2} → {3} {本体}で定義されました
type_Fun_sci_exists_several = ∃{pair_id}： {2} → {3} 、
type_Fun_sci_exists_simple = ∃{ID}： {2} → {3} 、
type_Fun_sci_forall_several = ∀{pair_id}： {2} → {3} 、
type_Fun_sci_forall_simple = ∀{ID}： {2} → {3} 、
type_Fun_sci_letin_several = 
type_Fun_sci_letin_simple = {ID}はからアプリケーションです{2}の{3} {本体}で定義されました
type_HatColor_arg = 色
type_HatColor_dec = {ID}は色にしてみましょう
type_HatColor_dec_body = 
type_HatColor_exists_several = その色は{ID}などが存在し、
type_HatColor_exists_simple = 色{ID}、その結果が存在します、
type_HatColor_forall_several = すべての色{ID}のために、
type_HatColor_forall_simple = すべての色{ID}のために、
type_HatColor_letin_several = 
type_HatColor_letin_simple = 
type_LimitExpr_arg = 限界値
type_LimitExpr_dec = {ID}は限界値とします
type_LimitExpr_dec_body = 限界値をしてみましょう{ID} = {本体}
type_LimitExpr_exists_several = その限界値は、存在し、
type_LimitExpr_exists_simple = そのような制限値{IDを}が存在し、
type_LimitExpr_forall_several = すべての制限値{ID}のために、
type_LimitExpr_forall_simple = すべての制限値{ID}のために、
type_LimitExpr_letin_several = 
type_LimitExpr_letin_simple = 
type_LimitExpr_sci_arg = 
type_LimitExpr_sci_dec = 
type_LimitExpr_sci_dec_body = 
type_LimitExpr_sci_exists_several = 
type_LimitExpr_sci_exists_simple = 
type_LimitExpr_sci_forall_several = 
type_LimitExpr_sci_forall_simple = 
type_LimitExpr_sci_letin_several = 
type_LimitExpr_sci_letin_simple = 
type_Neighborhood_arg = 近傍{0}
type_Neighborhood_dec = {idは}の近傍とする{0}
type_Neighborhood_dec_body = {idは}の近傍とする{0} {本体}で定義されました
type_Neighborhood_exists_several = 地域が存在する{0} {ID}、その結果は、
type_Neighborhood_exists_simple = 近傍が存在する{0} {ID}、その結果は、
type_Neighborhood_forall_several = すべての地域のため{0} {ID}、
type_Neighborhood_forall_simple = すべての近隣{0} 、{ID}
type_Neighborhood_letin_several = 
type_Neighborhood_letin_simple = {ID}の近傍{0} {本体}で定義されました
type_Neighborhood_sci_arg = 𝓥（ {0}
type_Neighborhood_sci_dec = てみましょう{ID} {数学：ε}𝓥（ {0}
type_Neighborhood_sci_dec_body = てみましょう{ID} = {本体}
type_Neighborhood_sci_exists_several = ∃{pair_id} {数学：ε}𝓥（ {0} ）、
type_Neighborhood_sci_exists_simple = ∃{ID} {数学：𝓥のε}（ {0} ）
type_Neighborhood_sci_forall_several = {} {∀pair_id数学：𝓥のε}（ {0} ）
type_Neighborhood_sci_forall_simple = ∀{ID} {数学：𝓥のε}（ {0} ）
type_Neighborhood_sci_letin_several = 
type_Neighborhood_sci_letin_simple = 
type_NvarFun_arg = ℕへの関数形のℕ
type_NvarFun_dec = {ID}はℕからℕの関数とします
type_NvarFun_dec_body = {ID}が{本体}で定義されたℕからℕの関数とします
type_NvarFun_exists_several = 
type_NvarFun_exists_simple = 
type_NvarFun_forall_several = ℕへℕからのすべての機能{ID}のために、
type_NvarFun_forall_simple = ℕへℕからすべての関数{ID}のために、
type_NvarFun_letin_several = 
type_NvarFun_letin_simple = {ID}は{本体}で定義されたℕへℕの適用であります
type_NvarFun_sci_arg = 
type_NvarFun_sci_dec = Fましょう：ℕ→ℕ
type_NvarFun_sci_dec_body = Fましょう：ℕ→ℕ{本体}で定義されました
type_NvarFun_sci_exists_several = 
type_NvarFun_sci_exists_simple = 
type_NvarFun_sci_forall_several = 
type_NvarFun_sci_forall_simple = 
type_NvarFun_sci_letin_several = 
type_NvarFun_sci_letin_simple = {ID}は{本体}で定義されたℕへℕの適用であります
type_NvarProp_arg = 
type_NvarProp_dec = {ID}がℕで定義された命題であるとします
type_NvarProp_dec_body = {ID}が{本体}によってランク{VAR}で定義された命題であるとします
type_NvarProp_exists_several = 
type_NvarProp_exists_simple = 
type_NvarProp_forall_several = 
type_NvarProp_forall_simple = すべての命題のために{ID}ℕに定義されています
type_NvarProp_letin_several = 
type_NvarProp_letin_simple = 
type_NvarProp_sci_arg = 
type_NvarProp_sci_dec = {ID}がℕで定義された命題であるとします
type_NvarProp_sci_dec_body = {ID}が{本体}によってランク{VAR}で定義された命題であるとします
type_NvarProp_sci_exists_several = 
type_NvarProp_sci_exists_simple = 
type_NvarProp_sci_forall_several = 
type_NvarProp_sci_forall_simple = ℕで定義されているすべての命題{ID}のために、
type_NvarProp_sci_letin_several = 
type_NvarProp_sci_letin_simple = 
type_NvarRel_arg = 
type_NvarRel_dec = {ID}はℕ×ℕで定義された命題であるとします
type_NvarRel_dec_body = 
type_NvarRel_exists_several = 
type_NvarRel_exists_simple = 
type_NvarRel_forall_several = 
type_NvarRel_forall_simple = ℕ×ℕで定義されているすべての命題{ID}のために、
type_NvarRel_letin_several = 
type_NvarRel_letin_simple = 
type_Nvar_arg = 整数
type_Nvar_dec = {ID}は整数とします
type_Nvar_dec_body = {ID}が{本体}で定義された整数とします
type_Nvar_exists_several = その{ID}このような整数が存在します
type_Nvar_exists_simple = その整数{ID}は、そのような存在
type_Nvar_forall_several = すべての整数{ID}のために、
type_Nvar_forall_simple = すべての整数{ID}のために、
type_Nvar_letin_several = 
type_Nvar_letin_simple = 
type_Nvar_sci_arg = ℕ
type_Nvar_sci_dec = てみましょう{ID} {数学：ε}ℕ
type_Nvar_sci_dec_body = てみましょう{ID} = {本体}
type_Nvar_sci_exists_several = ∃{pair_id} {数学：ε} {cartesian_type}、
type_Nvar_sci_exists_simple = ∃{ID} {数学：ε}ℕ、
type_Nvar_sci_forall_several = ∀{pair_id} {数学：ε} {cartesian_type}、
type_Nvar_sci_forall_simple = ∀{ID} {数学：ε}ℕ、
type_Nvar_sci_letin_several = 
type_Nvar_sci_letin_simple = 
type_O1BinRel_arg = 上の二項関係{0}
type_O1BinRel_dec = {ID}は上の二項関係であるとする{0}
type_O1BinRel_dec_body = {ID}は上の二項関係であるとする{0} {本体}で定義されました
type_O1BinRel_exists_several = 上の二項関係{ID}が存在する{0}となるように
type_O1BinRel_exists_simple = 上の二項関係{ID}が存在する{0}となるように
type_O1BinRel_forall_several = 上のすべての二項関係{ID}の{0}
type_O1BinRel_forall_simple = 上のすべての二項関係{ID}の{0}
type_O1BinRel_letin_several = 
type_O1BinRel_letin_simple = 
type_O1BinRel_sci_arg = {0} × {0} ）
type_O1BinRel_sci_dec = てみましょう{ID}⊆ {0} × {0}
type_O1BinRel_sci_dec_body = {ID}は上の二項関係であるとする{0}に定義{本体}
type_O1BinRel_sci_exists_several = ∃{cartesian_id}⊆{cartesian_type}、
type_O1BinRel_sci_exists_simple = ∃{ID}⊆ {0} × {0} 、
type_O1BinRel_sci_forall_several = ∀{cartesian_id}⊆{cartesian_type}、
type_O1BinRel_sci_forall_simple = ∀{ID}⊆ {0} × {0} 、
type_O1BinRel_sci_letin_several = 
type_O1BinRel_sci_letin_simple = 
type_O1ExSet_arg = セット
type_O1ExSet_dec = {ID}は集合とします
type_O1ExSet_dec_body = てみましょう{ID} = {本体}
type_O1ExSet_exists_several = その結果、集合{ID}が存在します
type_O1ExSet_exists_simple = そのような集合{IDを}が存在します
type_O1ExSet_forall_several = すべての集合{ID}のために、
type_O1ExSet_forall_simple = すべての集合{ID}のために、
type_O1ExSet_letin_several = 
type_O1ExSet_letin_simple = 
type_O1ExSet_sci_arg = セット
type_O1ExSet_sci_dec = {ID}は集合とします
type_O1ExSet_sci_dec_body = てみましょう{ID} = {本体}
type_O1ExSet_sci_exists_several = ∃{ID}、
type_O1ExSet_sci_exists_simple = ∃{ID}、
type_O1ExSet_sci_forall_several = すべての集合{ID}のために、
type_O1ExSet_sci_forall_simple = すべての集合{ID}のために、
type_O1ExSet_sci_letin_several = 
type_O1ExSet_sci_letin_simple = 
type_O1Fun_arg = 関数{0}の{1}
type_O1Fun_dec = {idは}から関数とする{0}の{1}
type_O1Fun_dec_body = {idは}から関数とする{0}の{1} {本体}で定義されました
type_O1Fun_exists_several = 機能{ID}が存在する{0}の{1}となるように
type_O1Fun_exists_simple = 関数{ID}が存在する{0}への{1}このような
type_O1Fun_forall_several = 以下からのすべての機能{ID}の{0}の{1}
type_O1Fun_forall_simple = すべての関数{ID}の{0}の{1} 、
type_O1Fun_letin_several = 
type_O1Fun_letin_simple = 
type_O1Fun_sci_arg = {0} → {1}
type_O1Fun_sci_dec = てみましょう{ID}： {0} → {1}
type_O1Fun_sci_dec_body = てみましょう{idは}： {0} → {1} {本体}で定義されました
type_O1Fun_sci_exists_several = ∃{pair_id}： {0} → {1} 、
type_O1Fun_sci_exists_simple = ∃{ID}： {0} → {1} 、
type_O1Fun_sci_forall_several = ∀{pair_id}： {0} → {1} 、
type_O1Fun_sci_forall_simple = ∀{ID}： {0} → {1} 、
type_O1Fun_sci_letin_several = 
type_O1Fun_sci_letin_simple = 
type_O1Rel_arg = 関係デ{0} × {1}
type_O1Rel_dec = {ID}は上の関係であるとする{0} × {1}
type_O1Rel_dec_body = {ID}は上の関係であるとする{0} × {1} {本体}で定義されました
type_O1Rel_exists_several = 上の関係{ID}が存在する{0} × {1}となるように
type_O1Rel_exists_simple = 上の関係{ID}が存在する{0} × {1}となるように
type_O1Rel_forall_several = すべての関係について{ID}の{0} × {1}
type_O1Rel_forall_simple = 上のすべての関係{ID}の{0} × {1} 、
type_O1Rel_letin_several = 
type_O1Rel_letin_simple = 
type_O1Rel_sci_arg = {0} × {1} ）
type_O1Rel_sci_dec = てみましょう{ID}⊆ {0} × {1}
type_O1Rel_sci_dec_body = てみましょう{ID}⊆ {0} × {1} {本体}で定義されました
type_O1Rel_sci_exists_several = ∃{cartesian_id}⊆{cartesian_type}、
type_O1Rel_sci_exists_simple = ∃{ID}⊆ {0} × {1} 、
type_O1Rel_sci_forall_several = ∀{cartesian_id}⊆{cartesian_type}、
type_O1Rel_sci_forall_simple = ∀{ID}⊆ {0} × {1} 、
type_O1Rel_sci_letin_several = 
type_O1Rel_sci_letin_simple = 
type_O1SetProp2_arg = 式
type_O1SetProp2_dec = {ID}は式とします
type_O1SetProp2_dec_body = {ID}が{本体}で定義された式であるとします
type_O1SetProp2_exists_several = その結果、式{ID}が存在します
type_O1SetProp2_exists_simple = その式{ID}は、そのような存在
type_O1SetProp2_forall_several = すべての式{ID}のために、
type_O1SetProp2_forall_simple = すべての式{ID}のために、
type_O1SetProp2_letin_several = 
type_O1SetProp2_letin_simple = 
type_O1SetProp2_sci_arg = 式
type_O1SetProp2_sci_dec = {ID}は式とします
type_O1SetProp2_sci_dec_body = {ID}が{本体}で定義された式であるとします
type_O1SetProp2_sci_exists_several = その結果、式{ID}が存在します
type_O1SetProp2_sci_exists_simple = その式{ID}は、そのような存在
type_O1SetProp2_sci_forall_several = すべての式{ID}のために、
type_O1SetProp2_sci_forall_simple = すべての式{ID}のために、
type_O1SetProp2_sci_letin_several = 
type_O1SetProp2_sci_letin_simple = 
type_O1SetProp_arg = 式
type_O1SetProp_dec = {ID}は式とします
type_O1SetProp_dec_body = {ID}が{本体}で定義された式であるとします
type_O1SetProp_exists_several = その結果、式{ID}が存在します
type_O1SetProp_exists_simple = その式{ID}は、そのような存在
type_O1SetProp_forall_several = すべての式{ID}のために、
type_O1SetProp_forall_simple = すべての式{ID}のために、
type_O1SetProp_letin_several = 
type_O1SetProp_letin_simple = 
type_O1U_arg = 宇宙
type_O1U_dec = {ID}は要素とします
type_O1U_dec_body = {ID}は要素{本体}とします
type_O1U_exists_several = 要素が存在する{ID}、このような
type_O1U_exists_simple = その要素{ID}は、そのような存在
type_O1U_forall_several = すべての要素{ID}のために、
type_O1U_forall_simple = すべての要素{ID}のために、
type_O1U_letin_several = 
type_O1U_letin_simple = 
type_O1U_sci_arg = 宇宙
type_O1U_sci_dec = {ID}は要素とします
type_O1U_sci_dec_body = てみましょう{ID} = {本体}
type_O1U_sci_exists_several = ∃{ID}、
type_O1U_sci_exists_simple = ∃{ID}、
type_O1U_sci_forall_several = ∀{ID}、
type_O1U_sci_forall_simple = ∀{ID}、
type_O1U_sci_letin_several = 
type_O1U_sci_letin_simple = 
type_PHITYPE_arg = 
type_PHITYPE_dec = 
type_PHITYPE_dec_body = 
type_PHITYPE_exists_several = 
type_PHITYPE_exists_simple = 
type_PHITYPE_forall_several = 
type_PHITYPE_forall_simple = 
type_PHITYPE_letin_several = 
type_PHITYPE_letin_simple = {ID}は℘（から関数である{2} ）℘する（ {0} ）×℘（ {1} ）{本体}で定義されました
type_PHITYPE_sci_arg = 
type_PHITYPE_sci_dec = 
type_PHITYPE_sci_dec_body = （℘：{ID}ましょう{2} →）℘（ {0} ）×℘（ {1} ）{本体}で定義されました
type_PHITYPE_sci_exists_several = 
type_PHITYPE_sci_exists_simple = 
type_PHITYPE_sci_forall_several = 
type_PHITYPE_sci_forall_simple = 
type_PHITYPE_sci_letin_several = 
type_PHITYPE_sci_letin_simple = {ID}：℘（ {2} ）→℘（ {0} ）×℘（ {1} ）{本体}で定義されました
type_Point_arg = ポイント
type_Point_dec = {ID}はポイントとします
type_Point_dec_body = {ID}が{本体}で定義される点であるとします
type_Point_exists_several = その{ID}このような点が存在します
type_Point_exists_simple = その点{ID}は、そのような存在
type_Point_forall_several = すべてのポイントの{ID}、
type_Point_forall_simple = すべての点{ID}のために、
type_Point_letin_several = 
type_Point_letin_simple = 
type_Prop_arg = 命題
type_Prop_dec = {ID}は命題とします
type_Prop_dec_body = {ID}が{本体}で定義された命題であるとします
type_Prop_exists_several = その{ID}このような命題が存在します
type_Prop_exists_simple = 命題{ID}の存在となるよう
type_Prop_forall_several = すべての命題{ID}のために、
type_Prop_forall_simple = すべての命題{ID}のために、
type_Prop_letin_several = 
type_Prop_letin_simple = 
type_Rel_arg = {2} × {3} ）
type_Rel_dec = {ID}は上の関係であるとする{2} × {3}
type_Rel_dec_body = {ID}は上の関係であるとする{2} × {3} {本体}で定義されました
type_Rel_exists_several = 上の関係{ID}が存在し{2} × {3}となるように
type_Rel_exists_simple = 上の関係{ID}が存在する{2} × {3}となるように
type_Rel_forall_several = すべての関係について{ID}の{2} × {3}
type_Rel_forall_simple = 上のすべての関係{ID}の{2} × {3} 、
type_Rel_letin_several = 
type_Rel_letin_simple = 
type_Rel_sci_arg = {2} × {3} ）
type_Rel_sci_dec = てみましょう{ID}⊆ {2} × {3}
type_Rel_sci_dec_body = {ID}は上の関係であるとする{2} × {3} {本体}で定義されました
type_Rel_sci_exists_several = ∃{cartesian_id}⊆{cartesian_type}、
type_Rel_sci_exists_simple = ∃{ID}⊆ {2} × {3} 、
type_Rel_sci_forall_several = ∀{cartesian_id}⊆{cartesian_type}、
type_Rel_sci_forall_simple = ∀{ID}⊆ {2} × {3} 、
type_Rel_sci_letin_several = 
type_Rel_sci_letin_simple = 
type_Series_arg = シリーズ
type_Series_dec = {ID}はシリーズであるとします
type_Series_dec_body = {ID}は上に定義されたシリーズであるとする{0} {本体} {dom_serie}によって
type_Series_exists_several = シリーズ{ID}、その結果が存在します
type_Series_exists_simple = そのシリーズ{ID}は、そのような存在
type_Series_forall_several = 非常にシリーズの{ID}、
type_Series_forall_simple = 各シリーズごと{ID}のために、
type_Series_letin_several = 
type_Series_letin_simple = {ID}は上に定義されたシリーズである{0} {本体}によって
type_SetProp2_arg = 
type_SetProp2_dec = {ID}は上の命題であるとする{0}
type_SetProp2_dec_body = 
type_SetProp2_exists_several = 
type_SetProp2_exists_simple = 
type_SetProp2_forall_several = 上のすべての命題{ID}の{0}
type_SetProp2_forall_simple = 上のすべての命題{ID}の{0}
type_SetProp2_letin_several = 
type_SetProp2_letin_simple = 
type_SetProp2_sci_arg = 
type_SetProp2_sci_dec = {ID}は上の命題であるとする{0}
type_SetProp2_sci_dec_body = 
type_SetProp2_sci_exists_several = 
type_SetProp2_sci_exists_simple = 
type_SetProp2_sci_forall_several = 上のすべての命題{ID}の{0}
type_SetProp2_sci_forall_simple = 上のすべての命題{ID}の{0}
type_SetProp2_sci_letin_several = 
type_SetProp2_sci_letin_simple = 
type_SetProp_arg = 
type_SetProp_dec = {ID}は上の命題であるとする{0}
type_SetProp_dec_body = 
type_SetProp_exists_several = 
type_SetProp_exists_simple = 
type_SetProp_forall_several = 上のすべての命題{ID}の{0}
type_SetProp_forall_simple = 上のすべての命題{ID}の{0}
type_SetProp_letin_several = 
type_SetProp_letin_simple = 
type_UA_arg = A
type_UA_dec = てみましょう{タイプ} {ID}
type_UA_dec_body = てみましょう{タイプ} {ID} = {本体}
type_UA_exists_several = ∃{ID} {数学：ε} {cartesian_type}、
type_UA_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_UA_forall_several = ∀{ID} {数学：ε} {cartesian_type}、
type_UA_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_UA_letin_several = 
type_UA_letin_simple = 
type_UA_sci_arg = A
type_UA_sci_dec = てみましょう{ID} {数学：ε} A
type_UA_sci_dec_body = てみましょう{ID} = {本体}
type_UA_sci_exists_several = ∃{pair_id} {数学：ε} {cartesian_type}、
type_UA_sci_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_UA_sci_forall_several = ∀{pair_id} {数学：ε} {cartesian_type}、
type_UA_sci_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_UA_sci_letin_several = 
type_UA_sci_letin_simple = 
type_UB_arg = B
type_UB_dec = てみましょう{タイプ} {ID}
type_UB_dec_body = てみましょう{タイプ} {ID} = {本体}
type_UB_exists_several = ∃{ID} {数学：ε} {cartesian_type}、
type_UB_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_UB_forall_several = ∀{ID} {数学：ε} {cartesian_type}、
type_UB_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_UB_letin_several = 
type_UB_letin_simple = 
type_UB_sci_arg = B
type_UB_sci_dec = てみましょう{ID} {数学：ε} B
type_UB_sci_dec_body = てみましょう{ID} = {本体}
type_UB_sci_exists_several = ∃{pair_id} {数学：ε} {cartesian_type}、
type_UB_sci_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_UB_sci_forall_several = ∀{pair_id} {数学：ε} {cartesian_type}、
type_UB_sci_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_UB_sci_letin_several = 
type_UB_sci_letin_simple = 
type_UC_arg = C言語
type_UC_dec = てみましょう{タイプ} {ID}
type_UC_dec_body = てみましょう{タイプ} {ID} = {本体}
type_UC_exists_several = ∃{ID} {数学：ε} {cartesian_type}、
type_UC_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_UC_forall_several = ∀{ID} {数学：ε} {cartesian_type}、
type_UC_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_UC_letin_several = 
type_UC_letin_simple = 
type_UC_sci_arg = C言語
type_UC_sci_dec = てみましょう{ID} {数学：ε} C
type_UC_sci_dec_body = てみましょう{ID} = {本体}
type_UC_sci_exists_several = ∃{pair_id} {数学：ε} {cartesian_type}、
type_UC_sci_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_UC_sci_forall_several = ∀{pair_id} {数学：ε} {cartesian_type}、
type_UC_sci_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_UC_sci_letin_several = 
type_UC_sci_letin_simple = 
type_UE_arg = E
type_UE_dec = てみましょう{タイプ} {ID}
type_UE_dec_body = てみましょう{タイプ} {ID} = {本体}
type_UE_exists_several = ∃{ID} {数学：ε} {cartesian_type}、
type_UE_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_UE_forall_several = ∀{ID} {数学：ε} {cartesian_type}、
type_UE_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_UE_letin_several = 
type_UE_letin_simple = 
type_UE_sci_arg = E
type_UE_sci_dec = てみましょう{ID} {数学：ε} E
type_UE_sci_dec_body = てみましょう{ID} = {本体}
type_UE_sci_exists_several = ∃{pair_id} {数学：ε} {cartesian_type}、
type_UE_sci_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_UE_sci_forall_several = ∀{pair_id} {数学：ε} {cartesian_type}、
type_UE_sci_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_UE_sci_letin_several = 
type_UE_sci_letin_simple = 
type_U_arg = {ID}
type_U_dec = てみましょう{タイプ} {ID}
type_U_dec_body = てみましょう{タイプ} {ID} = {本体}
type_U_exists_several = ∃{ID} {数学：ε} {cartesian_type}、
type_U_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_U_forall_several = ∀{ID} {数学：ε} {cartesian_type}、
type_U_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_U_letin_several = 
type_U_letin_simple = 
type_U_sci_arg = {ID}
type_U_sci_dec = てみましょう{ID} {数学：ε} {タイプ}
type_U_sci_dec_body = てみましょう{ID} = {本体}
type_U_sci_exists_several = ∃{pair_id} {数学：ε} {cartesian_type}、
type_U_sci_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_U_sci_forall_several = ∀{pair_id} {数学：ε} {cartesian_type}、
type_U_sci_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_U_sci_letin_several = 
type_U_sci_letin_simple = 
type_Universe_arg = 宇宙
type_Universe_dec = {ID}は宇宙であるとします
type_Universe_dec_body = {ID}が{本体}で定義された宇宙であるとします
type_Universe_exists_several = そのユニバースは、{ID}などが存在します
type_Universe_exists_simple = その宇宙{ID}は、そのような存在
type_Universe_forall_several = すべてのユニバース{ID}のために、
type_Universe_forall_simple = すべての宇宙{ID}のために、
type_Universe_letin_several = 
type_Universe_letin_simple = 
type_WearingHat_arg = 帽子の着用者
type_WearingHat_dec = {ID}は帽子の着用者とします
type_WearingHat_dec_body = 
type_WearingHat_exists_several = 帽子の着用者{ID}、その結果が存在します、
type_WearingHat_exists_simple = 帽子のキャリア{ID}、その結果が存在します、
type_WearingHat_forall_several = すべての帽子の着用者{ID}のために、
type_WearingHat_forall_simple = すべての帽子の着用者{ID}のために、
type_WearingHat_letin_several = 
type_WearingHat_letin_simple = 
type_gbmember_arg = 島民
type_gbmember_dec = {ID}は島民とします
type_gbmember_dec_body = 
type_gbmember_exists_several = その島民は{ID}などが存在します
type_gbmember_exists_simple = その島民{ID}は、そのような存在
type_gbmember_forall_several = すべての島民{ID}のために、
type_gbmember_forall_simple = すべての島民{ID}のために、
type_gbmember_letin_several = 
type_gbmember_letin_simple = 
type_gbmember_sci_arg = 島民
type_gbmember_sci_dec = {ID}は島民とします
type_gbmember_sci_dec_body = 
type_gbmember_sci_exists_several = その島民は{ID}などが存在します
type_gbmember_sci_exists_simple = その島民{ID}は、そのような存在
type_gbmember_sci_forall_several = すべての島民{ID}のために、
type_gbmember_sci_forall_simple = すべての島民{ID}のために、
type_gbmember_sci_letin_several = 
type_gbmember_sci_letin_simple = 
type_type_default_arg = {ID}
type_type_default_dec = てみましょう{タイプ} {ID}
type_type_default_dec_body = てみましょう{タイプ} {ID} = {本体}
type_type_default_exists_several = ∃{ID} {数学：ε} {cartesian_type}、
type_type_default_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_type_default_forall_several = ∀{ID} {数学：ε} {cartesian_type}、
type_type_default_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_type_default_letin_several = 
type_type_default_letin_simple = 
type_type_default_sci_arg = {ID}
type_type_default_sci_dec = てみましょう{ID} {数学：ε} {タイプ}
type_type_default_sci_dec_body = てみましょう{ID} = {本体}
type_type_default_sci_exists_several = ∃{pair_id} {数学：ε} {cartesian_type}、
type_type_default_sci_exists_simple = ∃{ID} {数学：ε} {タイプ}、
type_type_default_sci_forall_several = ∀{pair_id} {数学：ε} {cartesian_type}、
type_type_default_sci_forall_simple = ∀{ID} {数学：ε} {タイプ}、
type_type_default_sci_letin_several = 
type_type_default_sci_letin_simple = 
